Syntax for MySQL
-SQL is not a case sensitive language. But it is best practice is to capitalize SQL keywords and lowercase everything else.

-You need to terminate statements with ';'

-If you want to have a space in between column name you need to use '' or "" (ex: discount_factor -> 'discount factor')

1) 'USE' is used to select a database

2) 'SELECT' is used to indicate the columns that you want to retrieve 
    -'*' means all columns
    -You can change the order of the columns by changing the order specified after the select phrase(ex: SELECT last_name, first_name).
    -You can use arithmetic expressions such as +,-,*,/,and % on columns. It follows the order of operations. (ex: SELECT points + 10) 
    -'AS' keyword is used to give column an alias (different name) (ex: SELECT points + 10 AS discount_factor)
    -'DISTINCT' keyword is used to remove duplicates
    (ex: SELECT DISTINCT state)

4) "FROM" is used for location of the table

5) "WHERE" is used to filter the table (optional)
    -Operators that can be used: >, >=, <, <=, =, (!= and <> same)
    -Uppercase and lowercase doesnt matter (ex: WHERE state= 'va' or WHERE state='VA')
    -You can use operators on dates but use 'YYYY-MM-DD'. (ex: WHERE birthdate > '1990-01-01')  

    -AND, OR and NOT operators are available to use
    However AND operator is always evaluated first then OR unless parenthesis are used. 
    (ex: WHERE NOT (birth_date > '1990-01-01' OR points > 1000)
    can also be written as 
    WHERE (birth_date <= '1990-01-01' AND points <= 1000) )

    -IN operator (ex: WHERE state IN ('VA', 'FL', 'GA') 
    can also be written as 
    WHERE state = 'VA' or state = 'FL' or state = 'GA' )

    -BETWEEN operator (ex: WHERE points BETWEEN 1000 AND 3000
    can also be written as 
    WHERE points >= 1000 and points <= 3000)
    These numbers are inclusive 

    -LIKE used to match rows with a specific string pattern
    starts with b 'b%' includes b anywhere '%b%' end with b '%b' exactly 2 character long but second is y '_y'
    (ex: WHERE last_name Like 'b%')

    -REGEXP - can also be used instead of LIKE 
    can searh for more complex patterns

    -NULL- used to find missing values 
    (ex: WHERE phone IS NULL
    WHERE phone IS NOT NULL)

6) "ORDER BY" is used to organize the table (optional)    
    (ex SELECT * FROM customers ORDER BY first_name)

    You can sort using multiple columns 
    (ex SELECT * FROM customers ORDER BY state, first_name
    sort by state and within each state sort by first_name
    )

    DESC- will reverse the sort order 
    (ex SELECT * FROM customers ORDER BY first_name DESC)

    In myslq you can sort data by any colum even if the colum is not in the select clause or not 
    (ex: SELECT first_name, last_name FROM customers ORDER BY birth_date) 

    You can sort by column position as well, but not good
    (ex: SELECT * FROM customers ORDER BY 1,2) 

7) "LIMIT" is used to limit the amount of search results 
    (ex: SELECT * FFROM customers LIMIT 30)
    This will only show the first 30 rows
    Useful to paginate the data
    (ex: SELECT * FFROM customers LIMIT 6,3)
    This will show results starting from customer_id 7 and ending 3 after (7-9)


